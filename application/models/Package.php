<?php
/**
 * Class representing a package which can be deployed to a computer
 *
 * Copyright (C) 2011-2015 Holger Schletz <holger.schletz@web.de>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @package Models
 */
/** A single package which can be deployed to a computer
 *
 * This class provides an interface to all related database entries, the
 * download directory and the files stored within this directory (XML metafile
 * and the package fragments).
 *
 * The procedures of building and activating a package are merged into a single
 * step. This is limited to a single download location per package.
 *
 *
 * The following properties are mapped to a column in the download_available
 * table. Some of these will also be used in the XML metafile.
 *
 * - <b>Id:</b> numeric package ID, historically a UNIX timestamp
 * - <b>Name:</b> name to uniquely identify package
 * - <b>Timestamp:</b> Timestamp of package creation
 * - <b>Priority:</b> download priority (0-10)
 * - <b>NumFragments:</b> number of download fragments - ignored by {@link build()}
 * - <b>Size:</b> download size - ignored by {@link build()}
 * - <b>Platform:</b> one of 'windows', 'linux' or 'mac'
 * - <b>Comment:</b> comment
 *
 * The following readonly properties are generated by {@link fetchAll()}.
 *
 * - <b>NumNonnotified:</b> number of clients waiting for notification
 * - <b>NumSuccess:</b> number of clients with successful deployment
 * - <b>NumNotified:</b> number of clients currently downloading/installing package
 * - <b>NumError:</b> number of clients with unsuccessful deployment
 *
 * The following properties are mapped to an XML attribute.
 *
 * - <b>Hash:</b> hash of assembled package
 * - <b>DeployAction:</b> one of 'store', 'execute', 'launch'
 * - <b>ActionParam:</b> path for storage or command to execute, depending on action
 * - <b>Warn:</b> Whether the user should be notified before deployment
 * - <b>WarnMessage:</b> Message to display before deployment
 * - <b>WarnCountdown:</b> Timeout in seconds before deployment starts
 * - <b>WarnAllowAbort:</b> Whether the user should be allowed to abort
 * - <b>WarnAllowDelay:</b> Whether the user should be allowed to delay
 * - <b>PostInstMessage:</b> Message to display after deployment
 *
 * The following Attributes are only used by {@link build()}.
 *
 * - <b>FileName:</b> name of uploaded file, used only for ZIP file creation
 * - <b>FileLocation:</b> full path to uploaded file. May be deleted by build()!
 * @package Models
 */
class Model_Package extends Model_Abstract
{
    /** {@inheritdoc} */
    protected $_forceValidProperties = false;

    /** {@inheritdoc} */
    protected $_propertyMap = array(
        'Name' => 'name',
        'Timestamp' => 'fileid',
        'Priority' => 'priority',
        'NumFragments' => 'fragments',
        'Size' => 'size',
        'Platform' => 'osname',
        'Comment' => 'comment',
        'Id' => 'id',
        'NumNonnotified' => 'num_nonnotified',
        'NumSuccess' => 'num_success',
        'NumNotified' => 'num_notified',
        'NumError' => 'num_error',
        'Hash' => 'Hash',
        'DeployAction' => 'DeployAction',
        'ActionParam' => 'ActionParam',
        'Warn' => 'Warn',
        'WarnMessage' => 'WarnMessage',
        'WarnCountdown' => 'WarnCountdown',
        'WarnAllowAbort' => 'WarnAllowAbort',
        'WarnAllowDelay' => 'WarnAllowDelay',
        'PostInstMessage' => 'PostInstMessage',
        'FileName' => 'fileName',
        'FileLocation' => 'fileLocation',
    );

    /** {@inheritdoc} */
    protected $_types = array(
        'Timestamp' => 'timestamp',
        'Priority' => 'integer',
        'NumFragments' => 'integer',
        'Size' => 'integer',
        'Comment' => 'clob',
        'Id' => 'integer',
        'NumNonnotified' => 'integer',
        'NumSuccess' => 'integer',
        'NumNotified' => 'integer',
        'NumError' => 'integer',
        'Warn' => 'boolean',
        'WarnCountdown' => 'integer',
        'WarnAllowAbort' => 'boolean',
        'WarnAllowDelay' => 'boolean',
    );

    /** {@inheritdoc} */
    public function __set($property, $value)
    {
        parent::__set($property, $value);
        if ($property == 'fileid') {
            // Clone as Id property
            $this->id = $value;
        }
    }

    /**
     * Retrieve a property by its logical name
     *
     * Mangles platform names from raw database values to nicer abstract values.
     * @return mixed property value
     */
    public function getProperty($property, $rawValue=false)
    {
        // Treat Timestamp property before calling parent implementation to
        // avoid a PHP warning.
        if (!$rawValue and $property == 'Timestamp') {
            return new Zend_Date(parent::getProperty('Timestamp', true), Zend_Date::TIMESTAMP);
        }

        $value = parent::getProperty($property, $rawValue);
        if ($rawValue) {
            return $value;
        }

        switch ($property) {
            case 'Platform':
                $map = array(
                    'WINDOWS' => 'windows',
                    'LINUX' => 'linux',
                    'MacOSX' => 'mac',
                );
                $value = $map[$value];
                break;
            case 'WarnMessage':
            case 'WarnCountdown':
            case 'WarnAllowAbort':
            case 'WarnAllowDelay':
                if (!$this->getWarn()) {
                    $value = null;
                }
                break;
        }
        return $value;
    }

    /**
     * Set a property by its logical name
     *
     * Mangles platform names from abstract values to raw database values.
     * Raw values are accepted as well.
     */
    public function setProperty($property, $value)
    {
        if ($property == 'Platform') {
            $map = array(
                'windows' => 'WINDOWS',
                'linux' => 'LINUX',
                'mac' => 'MacOSX',
                'WINDOWS' => 'WINDOWS',
                'LINUX' => 'LINUX',
                'MacOSX' => 'MacOSX',
            );
            $value = $map[$value];
        } elseif ($property == 'Timestamp' and $value instanceof \Zend_Date) {
            // Raw value is UNIX timestamp, prevent parent from storing as ISO8601 string.
            $value = $value->get(\Zend_Date::TIMESTAMP);
        }
        parent::setProperty($property, $value);
    }
}
