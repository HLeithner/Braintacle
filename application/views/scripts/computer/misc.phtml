<?php
/**
 * Display audio devices, input devices and ports
 *
 * $Id$
 *
 * Copyright (C) 2011,2012 Holger Schletz <holger.schletz@web.de>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

$computer = $this->computer;

print $this->inventoryHeader($computer);


// Display audio devices

$headers = array(
    'Manufacturer' => $this->translate('Manufacturer'),
    'Name' => $this->translate('Name'),
    'Description' => $this->translate('Description'),
);

$renderCallbacks = array (
);

$audio = $this->getHelper('table')->table(
    $computer->getChildObjects('AudioDevice'),
    null,
    $headers,
    array(),
    'Model_AudioDevice',
    null,
    array(),
    $numAudio
);

if ($numAudio) {
    print $this->htmlTag(
        'h2',
        $this->translate('Audio devices')
    );
    print $audio;
}


// Display input devices

$headers = array(
    'Type' => $this->translate('Type'),
    'Manufacturer' => $this->translate('Manufacturer'),
    'Description' => $this->translate('Description'),
    'Comment' => $this->translate('Comment'),
    'Interface' => $this->translate('Interface'),
);

$renderCallbacks = array (
    'Type' => 'renderType',
);

function renderType($view, $inputDevice)
{
    $type = $inputDevice->getType();
    switch ($type) {
        case 'Keyboard':
            $type = $view->translate('Keyboard');
            break;
        case 'Pointing':
            $type = $view->translate('Pointing device');
            break;
    }
    return $view->escape($type);
}

$input = $this->getHelper('table')->table(
    $computer->getChildObjects('InputDevice'),
    null,
    $headers,
    array(),
    'Model_InputDevice',
    null,
    $renderCallbacks,
    $numInput
);

if ($numInput) {
    print $this->htmlTag(
        'h2',
        $this->translate('Input devices')
    );
    print $input;
}


// Display ports

$headers = array(
    'Type' => $this->translate('Type'),
    'Name' => $this->translate('Name'),
);
if (!$computer->isWindows()) {
    $headers['Connector'] = $this->translate('Connector');
}

$renderCallbacks = array (
);

$ports = $this->getHelper('table')->table(
    $computer->getChildObjects('Port'),
    null,
    $headers,
    array(),
    'Model_Port',
    null,
    array(),
    $numPorts
);

if ($numPorts) {
    print $this->htmlTag(
        'h2',
        $this->translate('Ports')
    );
    print $ports;
}
