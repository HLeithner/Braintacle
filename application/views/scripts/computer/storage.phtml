<?php
/**
 * Display storage information
 *
 * $Id$
 *
 * Copyright (C) 2011-2013 Holger Schletz <holger.schletz@web.de>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

$computer = $this->computer;

print $this->inventoryHeader($computer);


// Display storage devices

$headers = array(
    'Type' => $this->translate('Type'),
    'Name' => $this->translate('Name'),
    'Size' => $this->translate('Size'),
);
// Additional Columns for UNIX systems
if (!$computer->isWindows()) {
    $headers['Device'] = $this->translate('Device');
    $headers['Serial'] = $this->translate('Serial number');
    $headers['Firmware'] = $this->translate('Firmware version');
}

$renderCallbacks = array(
    'Size' => 'renderSize',
);

function renderSize($view, $object, $property)
{
    $size = $object->getProperty($property);
    if ($size) {
        $measure = new Zend_Measure_Binary($size / 1024, 'GIGABYTE');
        $output = $view->escape($measure->convertTo('GIGABYTE', 1));
        if ($property != 'Size') {
            $output .= ' (' . round($size / $object->getSize() * 100, 0) . '%)';
        }
        return $output;
    } else {
        return '&ndash;';
    }
}

$devices = $this->getHelper('table')->table(
    $computer->getChildObjects('StorageDevice'),
    null,
    $headers,
    array(),
    'Model_StorageDevice',
    null,
    $renderCallbacks,
    $numDevices
);

if ($numDevices) {
    print $this->htmlTag(
        'h2',
        $this->translate('Storage devices')
    );
    print $devices;
}


// Display volumes

if ($computer->isWindows()) {
    $headers = array(
        'Letter' => $this->translate('Letter'),
        'Label' => $this->translate('Label'),
        'Type' => $this->translate('Type'),
        'Filesystem' => $this->translate('Filesystem'),
        'Size' => $this->translate('Size'),
        'UsedSpace' => $this->translate('Used space'),
        'FreeSpace' => $this->translate('Free space'),
    );
} else {
    $headers = array(
        'Mountpoint' => $this->translate('Mountpoint'),
        'Device' => $this->translate('Device'),
        'Filesystem' => $this->translate('Filesystem'),
        'CreationDate' => $this->translate('Creation date'),
        'Size' => $this->translate('Size'),
        'UsedSpace' => $this->translate('Used space'),
        'FreeSpace' => $this->translate('Free space'),
    );
}

$renderCallbacks = array(
    'Label' => 'replaceNA',
    'Filesystem' => 'replaceNA',
    'CreationDate' => 'renderDate',
    'Size' => 'renderSize',
    'UsedSpace' => 'renderSize',
    'FreeSpace' => 'renderSize',
);

function replaceNA($view, $object, $property)
{
    $value = $object->getProperty($property);
    if ($value == 'N/A') {
        return '&ndash;';
    } else {
        return $view->escape($value);
    }
}

function renderDate($view, $volume)
{
    $date = $volume->getCreationDate();
    if ($date) {
        return $view->escape($date->get(Zend_Date::DATE_MEDIUM));
    } else {
        return '&ndash;';
    }
}

$volumes = $this->getHelper('table')->table(
    $computer->getChildObjects('Volume'),
    null,
    $headers,
    array(),
    'Model_Volume',
    null,
    $renderCallbacks,
    $numVolumes
);

if ($numVolumes) {
    print $this->htmlTag(
        'h2',
        $this->translate('Volumes')
    );
    print $volumes;
}
