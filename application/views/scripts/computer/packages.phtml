<?php
/**
 * Display and install packages associated with a computer
 *
 * Copyright (C) 2011-2015 Holger Schletz <holger.schletz@web.de>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

$computer = $this->computer;

print $this->inventoryHeader($computer);

print $this->htmlTag(
    'h2',
    $this->translate('Associated packages')
);

$headers = array(
    'Name' => $this->translate('Name'),
    'Status' => $this->translate('Status'),
    'Timestamp' => $this->translate('Timestamp'),
    'remove' => '',
);

$formats = array(
    'Status' => 'formatStatus',
    'remove' => 'text',
);

$renderCallbacks = array(
    'Status' => 'renderStatus',
    'remove' => 'renderRemoveLink',
);

function formatStatus($package, $property, $view)
{
    $class = 'textcenter';
    if ($package) { // not header
        switch ($package->getStatus()) {
            case null: // not notified
                $class .= ' blue';
                break;
            case 'SUCCESS':
                $class .= ' green';
                break;
            default: // NOTIFIED or ERR_*
                $class .= ' red';
        }
    }
    return $class;
}

function renderStatus($view, $package)
{
    $status = $package->getStatus();
    switch ($status) {
        case null:
            $content = $view->translate('not notified');
            break;
        case 'NOTIFIED':
            $content = $view->translate('in progress');
            break;
        case 'SUCCESS':
            $content = $view->translate('installed');
            break;
        default: // ERR_*
            $content = $view->escape($status);
    }
    return $content;
}

function renderRemoveLink($view, $package)
{
    return $view->htmlTag(
        'a',
        $view->translate('remove'),
        array(
            'href' => $view->url(
                array(
                    'controller' => 'computer',
                    'action' => 'removepackage',
                    'name' => $package->getName(),
                    'id' => $package->getComputer(),
                )
            )
        ),
        true
    );
}

print $this->table(
    $computer->getChildObjects(
        'PackageAssignment',
        $this->order,
        $this->direction
    ),
    null,
    $headers,
    $formats,
    'Model_PackageAssignment',
    null,
    $renderCallbacks
);


// Display package installation form if packages are available
$form = new Form_AffectPackages();
if ($form->addPackages($this->computer)) {
    $form->setAction(
        $this->url(
            array(
                'controller' => 'computer',
                'action' => 'installpackage',
            )
        )
    );
    print $this->htmlTag(
        'h2',
        $this->translate('Install packages')
    );
    print $form;
}
