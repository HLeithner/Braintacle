<?php
/**
 * Display list of computers
 *
 * $Id$
 *
 * Copyright (C) 2011,2012 Holger Schletz <holger.schletz@web.de>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

// render messages if present
$session = new Zend_Session_Namespace('ComputerMessages');
if (isset($session->success)) {
    if ($session->success == true) {
        $class = 'green textcenter';
    } else {
        $class = 'red textcenter';
    }
    print $this->htmlTag(
        'p',
        sprintf(
            $session->message,
            $this->escape($session->computerName)
        ),
        array('class' => $class)
    );
}

// Column headers
$headers = array(
    'Id' => $this->translate('ID'),
    'ClientId' => $this->translate('Client ID'),
    'Name' => $this->translate('Name'),
    'Workgroup' => $this->translate('Workgroup'),
    'CpuClock' => $this->translate('CPU clock'),
    'CpuCores' => $this->translate('CPU cores'),
    'CpuType' => $this->translate('CPU type'),
    'InventoryDate' => $this->translate('Last inventory'),
    'LastContactDate' => $this->translate('Last contact'),
    'PhysicalMemory' => $this->translate('Memory'),
    'SwapMemory' => $this->translate('Swap'),
    'IpAddress' => $this->translate('IP address'),
    'DnsServer' => $this->translate('DNS server'),
    'DefaultGateway' => $this->translate('Default gateway'),
    'OcsAgent' => $this->translate('OCS agent'),
    'OsName' => $this->translate('Operating system'),
    'OsVersionNumber' => $this->translate('OS version number'),
    'OsVersionString' => $this->translate('OS version string'),
    'OsComment' => $this->translate('OS comment'),
    'UserName' => $this->translate('User'),
    'Manufacturer' => $this->translate('Manufacturer'),
    'Model' => $this->translate('Model'),
    'Serial' => $this->translate('Serial number'),
    'Type' => $this->translate('Type'),
    'Uuid' => $this->translate('UUID'),
    'BiosManufacturer' => $this->translate('BIOS manufacturer'),
    'BiosVersion' => $this->translate('BIOS version'),
    'BiosDate' => $this->translate('BIOS date'),
    'AssetTag' => $this->translate('Asset tag'),
    'Package.Status' => $this->translate('Error code'),
    'Software.Version' => $this->translate('Version'),
    'AudioDevice.Name' => $this->translate('Audio device'),
    'Controller.Name' => $this->translate('Controller'),
    'Display.Manufacturer' => $this->translate('Monitor: manufacturer'),
    'Display.Description' => $this->translate('Monitor: description'),
    'Display.Serial' => $this->translate('Monitor: serial'),
    'Display.ProductionDate' => $this->translate('Monitor: production date'),
    'DisplayController.Name' => $this->translate('Display controller'),
    'DisplayController.Memory' => $this->translate('GPU memory'),
    'ExtensionSlot.Name' => $this->translate('Extension slot'),
    'Modem.Name' => $this->translate('Modem'),
    'NetworkInterface.MacAddress' => $this->translate('MAC address'),
    'NetworkInterface.IpAddress' => $this->translate('IP address'),
    'NetworkInterface.Subnet' => $this->translate('Network address'),
    'NetworkInterface.Netmask' => $this->translate('Netmask'),
    'Port.Name' => $this->translate('Port name'),
    'Printer.Name' => $this->translate('Printer name'),
    'Printer.Port' => $this->translate('Printer port'),
    'Printer.Driver' => $this->translate('Printer driver'),
    'Software.Name' => $this->translate('Software: Name'),
    'Software.Version' => $this->translate('Software: Version'),
    'Software.Publisher' => $this->translate('Software: Publisher'),
    'Software.Comment' => $this->translate('Software: Comment'),
    'Software.InstallLocation' => $this->translate('Software: Install location'),
    'Volume.Size' => $this->translate('Volume size'),
    'Volume.FreeSpace' => $this->translate('Free space'),
    'Windows.UserDomain' => $this->translate('User domain'),
    'Windows.Company' => $this->translate('Windows company'),
    'Windows.Owner' => $this->translate('Windows owner'),
    'Windows.ProductKey' => $this->translate('Windows product key'),
    'Windows.ManualProductKey' => $this->translate('Windows product key (manual)'),
    'Windows.ProductId' => $this->translate('Windows product ID'),
    'MsOfficeProduct.ProductKey' => $this->translate('MS Office product key'),
    'MsOfficeProduct.ProductId' => $this->translate('MS Office product ID'),
);
// Append headers for user defined information
foreach (Model_UserDefinedInfo::getTypes() as $name => $type) {
    if ($name == 'TAG') {
        $header = $this->translate('Category');
    } else {
        $header = ucfirst($name);
    }
    $headers['UserDefinedInfo.' . $name] = $header;
}

$renderCallbacks = array(
    'Name' => 'renderName',
);

function renderName($view, $computer)
{
    return $view->htmlTag(
        'a',
        $view->escape($computer->getName()),
        array('href' => $view->BaseUrl() . "/computer/$view->jumpto/id/" . $computer->getId()),
        true
    );
}

$table = $this->getHelper('table')->table(
    $this->computers,
    $this->columns,
    $headers,
    array(),
    'Model_Computer',
    null,
    $renderCallbacks,
    $count
);

$filter = $this->filter;
if ($filter) {
    $search = $this->search;
    if ($filter == 'Software') {
        $search = Model_Software::mangleName($search);
    }

    if (isset($this->filterUriPart)) {
        // This is a custom search result. Do not display filter description
        // because this would become difficult to read for multiple filters.
        // Just display the number of results and a link to edit the filter.
        $header = sprintf($this->translate('%d matches'), $count)
                . "<br>\n"
                . $this->htmlTag(
                    'a',
                    $this->translate('Edit filter'),
                    array('href' => $this->baseUrl() . '/computer/search' . $this->filterUriPart),
                    true
                );
    } else {
        // For fixed filters, print a nicer description.
        $header = Model_Computer::getFilterDescription($filter, $search, $count);
    }
    print $this->htmlTag(
        'p',
        $header,
        array('class' => 'textcenter')
    );
} else {
    print $this->htmlTag(
        'p',
        sprintf(
            $this->translate('Number of computers: %d'),
            $count
        ),
        array('class' => 'textcenter')
    );
}

print $table;
