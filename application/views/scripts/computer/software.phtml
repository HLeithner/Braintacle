<?php
/**
 * Display installled software
 *
 * Copyright (C) 2011-2013 Holger Schletz <holger.schletz@web.de>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

$computer = $this->computer;

print $this->inventoryHeader($computer);

$headers = array(
    'Name' => $this->translate('Name'),
    'Version' => $this->translate('Version'),
);
if ($computer->isWindows()) {
    $headers['Publisher'] = $this->translate('Publisher');
    $headers['InstallLocation'] = $this->translate('Location');
    $headers['Architecture'] = $this->translate('Architecture');
} else {
    $headers['Size'] = $this->translate('Size');
}

$renderCallbacks = array(
    'Name' => 'renderName',
    'Size' => 'renderSize',
    'Architecture' => 'renderArchitecture',
);

function renderName($view, $software)
{
    $comment = $software->getComment();
    if ($comment) {
        return $view->htmlTag(
            'span',
            $view->escape($software->getName()),
            array('title' => $comment),
            true
        );
    } else {
        return $view->escape($software->getName());
    }
}

function renderSize($view, $software)
{
    $measure = new Zend_Measure_Binary($software->getSize() / 1024, 'KILOBYTE');
    return $view->escape($measure->convertTo('KILOBYTE', 0));
}

function renderArchitecture($view, $software)
{
    $architecture = $software->getArchitecture();
    if ($architecture) { // No formatting of NULL
        $architecture = $view->escape($architecture . ' Bit');
    }
    return $architecture;
}

function markDuplicates($software, $view)
{
    static $lines = array(); // preserved across function calls

    if (!$software) { // ignore header line
        return;
    }

    $line = $software->getName() . "\0"
          . $software->getVersion() . "\0"
          . $software->getPublisher() . "\0"
          . $software->getInstallLocation();
    if (in_array($line, $lines)) {
        return 'duplicate'; // tag the line so that this page's JS can deal with it
    } else {
        $lines[] = $line; // add this line for future function calls
        return null;
    }
}

print '<p id="toggleDuplicatesLabel">';
print '<input type="checkbox" name="toggleDuplicates" onchange="toggleDuplicates();">';
print '&nbsp;';
print $this->translate('Display duplicate entries');
print "</p>\n";

print $this->table(
    $computer->getChildObjects('Software', $this->order, $this->direction),
    null,
    $headers,
    array('Architecture' => 'text'),
    'Model_Software',
    $computer->isWindows() ? 'markDuplicates' : null, // No duplicates on other OS
    $renderCallbacks
);

// Generate JavaScript to toggle display of duplicates
if ($computer->isWindows()) {
    $this->headScript()->captureStart();
    ?>

    /**
     * Event handler for toggleDuplicates checkbox
     */
    function toggleDuplicates()
    {
        renderTable(document.getElementsByName('toggleDuplicates')[0].checked);
    }


    /**
     * Rewrite each line's attributes depending on showDuplicates value
     */
    function renderTable(showDuplicates)
    {
        var display, i, lines, line, bg, class;

        // Determine display attribute for duplicate rows
        if (showDuplicates) {
            display = 'table-row';
        } else {
            display = 'none';
        }

        // Iterate over all rows. Toggle background fill for all displayed lines.
        // The fill status precomputed by the table view helper is no longer valid
        // because some lines may be hidden.
        lines = document.getElementsByTagName('tr');
        i = 0;
        bg = false; // start without background fill
        while (line = lines[i++]) {
            if (bg) {
                class = 'bgcolor';
            } else {
                class = '';
            }
            if (line.className.search('duplicate') != -1) {
                class += ' duplicate';
                line.style.display = display; // Show or hide line
                if (showDuplicates) {
                    bg = !bg; // toggle background fill only if line is displayed
                }
            } else {
                bg = !bg; // toggle background fill for all non-duplicate rows
            }
            line.className = class;
        }
    }

    /**
     * Called by body.onload().
     * The toggle checkbox (which is hidden by default) is displayed only if
     * The table contains duplicates. The table gets re-rendered in that case.
     */
    function init()
    {
        var i, lines, line;
        lines = document.getElementsByTagName('tr');
        i = 0;
        while (line = lines[i++]) {
            if (line.className.search('duplicate') != -1) {
                document.getElementById('toggleDuplicatesLabel').style.display = 'block';
                renderTable(false);
                break;
            }
        }
    }

    <?php
    $this->headScript()->captureEnd();
}
